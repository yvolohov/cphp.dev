<?php

namespace Classes\L_7_3;

class Dog
{
    public $name;

    public function bark()
    {
        print("Bark!\n");
    }

    final public function run()
    {
        print("I'm running!\n");
    }

    public function play($where, $when)
    {
        print("I'm playing!\n");
    }
}

/* Можно наследовать класс от другого класса (только одного) с
 * помощью ключевого слова extends. */
class Poodle extends Dog
{
    /* В классе-потомке можно переопределять свойства и методы класса-предка. При переопределении
     * свойство или метод класса-потомка подменяет аналогичное свойство или метод класса-предка и
     * оно становится недоступным. Обращение к нему впрочем возможно, но только через специальное
     * ключевое слово parent (об этом будет написано ниже). */
    public function bark()
    {
        print("OVR: BARK!\n");
    }

    /* При переопределении следует учитывать, что свойство или метод класса-потомка не
     * могут иметь более строгий уровень доступа, чем аналогичное свойство или метод класса-предка.
     * Т.е. public может переопределить private или protected, но не наоборот. */

    //protected $name; // переопределение невозможно, protected не может переопределить public
    public $name; // переопределение возможно, оба свойства являются public

    /* Нельзя переопределить final-метод */
    // public function run()
    // {
    //    print("OVR: I'M RUNNING!\n");
    // }

    /* В документации утверждается, что сигнатура переопределенного метода не может быть
     * строже, чем сигнатура переопределяемого. Т.е. количество параметров должно быть не меньше.
     * Но на практике это почему-то не работает. */
    public function play($where)
    {
        print("OVR: I'M PLAYING!\n");
    }
}