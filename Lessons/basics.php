<?php

namespace Lessons\Basics;

/* 1.1 Элементарная единица PHP кода называется оператором. Оператор завершается символом 'точка с запятой', который
 * означает конец оператора. На одной строке можно располагать несколько операторов. Один оператор можно располагать на
 * нескольких строках. Возможен пустой оператор, который не содержит никаких символов. */
function punctuation()
{
    $first = 1; $second = 2;
    $third = 3;
    $fourth
        = 4;
    ; ;;
}

/* 1.2 В PHP режим кода изначально отключен. Это значит что интерпретатор воспринимает файлы с расширением .php как
 * текст. Чтобы включить режим кода существует несколько способов:
 * - cтандартный тег: <?php ?>
 * - тег script: <script language="php"> </script>
 * - сокращенный тег: <?= ?>
 * - еще один сокращенный тег: <% %>
 * Не рекомендуется использовать два последних варианта.
 */
function tags()
{
    /* Выходим из режима кода в режим текста  */ ?>

    <b> Здесь нет PHP, только HTML </b>

    <script language="php">
        /* Снова входим в режим кода */
        echo "Здесь PHP снова работает \n";
        /* Выходим из режима кода в режим текста  */
    </script>

   <?php /* снова входим в режим кода */
}

/* 1.3 Существует три вида комментариев в php.
 * Все они представлены ниже. */
function comments()
{
    // Это однострочный комментарий, продолжающийся до конца строки

    # Это еще один однострочный комментарий, тоже продожающийся до конца строки

    /* Это многострочный комментарий
    который может распространяться на
    несколько строк */

    /* Или присутствовать */ /* сразу в нескольких местах */ /* на одной строке */

    // /* /* Нельзя вкладывать многострочные комментарии друг в друга, это приведет к ошибке */ */
}

/* 1.4 Арифметические операторы php - сложение, вычитание, умножение,
 * деление, остаток от деления. */
function arithmeticOperators()
{
    $add = 2 + 2; // 4
    $sub = 4 - 2; // 2
    $mul = 3 * 3; // 9
    $div = 10 / 3.33; // 3.003003003003

    echo "add = {$add}; sub = {$sub}; mul = {$mul}; div = {$div};\n";

    /* Оператор остатка от деления работает только с целыми числами.
     * Если передать ему число с плавающей точкой,
     * то от этого числа просто будет отброшена дробная часть. */
    $rest1 = 10 % 3; // 1
    $rest2 = 10 % 3.33; // 1 потому что 3.33 будет приведено к 3
    $rest3 = 10.6 % 3; // 1 потому что 10.6 будет приведено к 10

    /* Оператор остатка от деления возвращает отрицательный результат в том случае,
     * если первое число отрицательное. */
    $rest4 = -20 % 3; // -2 потому что -20 отрицательное значение

    echo "rest1 = {$rest1}; rest2 = {$rest2}; rest3 = {$rest3}; rest4 = {$rest4}\n";
}

/* 1.7 Операторы сравнения - равно, не равно, больше, меньше, больше или равно,
 * меньше или равно, идентично, не идентично */
function comparisonOperators()
{
    /* Операторы == и != сравнивают без учета типа.
     * Таким образом 0, False, '', '0', '0.0', 0.0 приводятся к одному значению. */
    $a = (0 == False) && (0 == '') && (0 == '0') && (0 == 0.0) && (0 == '0.0'); // True
    $b = (5 == True) && (5 == '5') && (5 == 5.0) && (5 == '5.0'); // True
    $с = (7 != 10); // True

    echo "a = {$a}; b = {$b}; с = {$с};\n";

    /* Операторы иднтичности === и !== сравнивают с учетом типа.
     * Таким образом 0, False, '', '0', '0.0', 0.0 все не идентичны друг другу. */
    $a = (0 === False) || (0 === '') || (0 === '0') || (0 === 0.0) || (0 === '0.0'); // False
    $b = (5 === True) || (5 === '5') || (5 === 5.0) || (5 === '5.0'); // False
    $с = (7 !== 10); // True

    echo "a = {$a}; b = {$b}; с = {$с};\n";

    $a = 2 > 1; // True
    $b = 1 < 2; // True
    $c = 1 >= 1; // True
    $d = 2 <= 2; // True
    $e = 2 <> 1; // True, аналогичен оператору !=

    echo "a = {$a}; b = {$b}; с = {$c}; d = {$d}; e = {$e};\n";
}

/* 1.8 Строковые операторы - конкатенация и
 * сокращенная форма конкатенации */
function stringOperators()
{
    // конкатенация
    $phrase1 = 'hello ' . 'world ' . '!!!';

    // сокращенная форма конкатенации
    $phrase2 = 'HELLO ';
    $phrase2 .= 'WORLD ';
    $phrase2 .= '!!!';

    echo "{$phrase1}\n{$phrase2}\n";
}

/* 1.11 Оператор выполнения. Предназначен для передачи команд
 * в операционную систему. */
function executionOperators()
{
    /* передаем команду в командную строку, получаем и выводим результат */
    $result = `ls -l`;
    echo "$result\n";

    /* то же самое, но с помощью функции shell_exec */
    $result = shell_exec('ls -l');
    echo "$result\n";
}

/* 1.13 Переменные это именованные области памяти, предназначенные
 * для хранения некоторых значений (чисел, строк, объектов). Имена
 * переменных в PHP начинаются со знака $ (доллар). */
function variablesNaming()
{
    /* После знака $ в имени переменной обязательно должна идти буква либо знак
     * подчеркивания. Начиная с третьего символа также может быть цифра.
     * Прочие символы в именах переменных недопустимы. */
    $www = 10;
    $яяя = 11; // допустимы буквы любого алфавита, в том числе и кириллица
    $_xx = 22;
    $_99_ = 99;

    /* Эти имена переменных недопустимы */
    // $33 = 23; // Потому что начинается с цифры
    // $a:24 = 27; // Потому что в имени есть недопустимый символ (двоеточие)

    /* Имена переменных регистрозависимы. Ниже представлены разные переменные,
     * хоть их имена и отличаются только регистром. */
    $x = 10; $X = 11;
    echo "x = {$x}; X = {$X};\n";
}

/* 1.14 Если нужно, чтобы две переменные указывали на одни и те же данные,
 * используется механизм ссылок. */
function variablesReferencing()
{
    // a и b оба указывают на одну область памяти, в которой находится число 10
    $a = 10;
    $b =& $a; // используем оператор присваивания по ссылке
    echo "a = {$a}; b = {$b};\n";

    // изменим значение через переменную a и убедимся, что b тоже изменилась
    $a = 15;
    echo "a = {$a}; b = {$b};\n";

    // изменим значение через переменную b и убедимся, что a тоже изменилась
    $b = 20;
    echo "a = {$a}; b = {$b};\n";
}

/* 1.15 Инициализация переменных. Проверка инициализации
 * переменных. */
function variablesInitializing()
{
    /* Неинициализированная переменная по умолчанию имеет значение NULL */
    $type_a = gettype($a);
    echo "type of a = {$type_a};\n";

    /* Что бы проверить, была ли переменная инициализирована, используем функцию isset() */
    echo isset($a) ? "a is set\n" : "a is not set\n";

    /* Если переменной принудительно присвоить значение Null, она будет считатся неинициализированной */
    $b = Null;
    echo isset($b) ? "b is set\n" : "b is not set\n";

    /* Переменные, которые содержат 0, False, '' считаются инициализированными */
    $c = False;
    echo isset($c) ? "c is set\n" : "c is not set\n";
}